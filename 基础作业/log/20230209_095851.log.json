{"env_info": "sys.platform: linux\nPython: 3.7.13 (default, Oct 18 2022, 18:57:03) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1,2,3,4,5,6,7: GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda-11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.74\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2+cu111\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.25.3+e71b499", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file=\n        '/media/ders/linxin/mmdetection/data/balloon/train/annotation_coco.json',\n        img_prefix='/media/ders/linxin/mmdetection/data/balloon/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        classes=('balloon', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file=\n        '/media/ders/linxin/mmdetection/data/balloon/val/annotation_coco.json',\n        img_prefix='/media/ders/linxin/mmdetection/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file=\n        '/media/ders/linxin/mmdetection/data/balloon/val/annotation_coco.json',\n        img_prefix='/media/ders/linxin/mmdetection/data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/media/ders/linxin/mmdetection/checkpoints/mask_rcnn_r50_fpn_1x_coco_20200205-d4b0c5d6.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_1x_ballon'\nauto_resume = False\ngpu_ids = [5]\n", "seed": 192056895, "exp_name": "mask_rcnn_r50_fpn_1x_ballon.py"}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00122, "bbox_mAP": 0.592, "bbox_mAP_50": 0.81, "bbox_mAP_75": 0.767, "bbox_mAP_s": 0.002, "bbox_mAP_m": 0.462, "bbox_mAP_l": 0.665, "bbox_mAP_copypaste": "0.592 0.810 0.767 0.002 0.462 0.665", "segm_mAP": 0.701, "segm_mAP_50": 0.799, "segm_mAP_75": 0.796, "segm_mAP_s": 0.006, "segm_mAP_m": 0.517, "segm_mAP_l": 0.788, "segm_mAP_copypaste": "0.701 0.799 0.796 0.006 0.517 0.788"}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00246, "bbox_mAP": 0.698, "bbox_mAP_50": 0.855, "bbox_mAP_75": 0.826, "bbox_mAP_s": 0.083, "bbox_mAP_m": 0.615, "bbox_mAP_l": 0.758, "bbox_mAP_copypaste": "0.698 0.855 0.826 0.083 0.615 0.758", "segm_mAP": 0.774, "segm_mAP_50": 0.855, "segm_mAP_75": 0.855, "segm_mAP_s": 0.065, "segm_mAP_m": 0.654, "segm_mAP_l": 0.847, "segm_mAP_copypaste": "0.774 0.855 0.855 0.065 0.654 0.847"}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.0037, "bbox_mAP": 0.719, "bbox_mAP_50": 0.896, "bbox_mAP_75": 0.868, "bbox_mAP_s": 0.025, "bbox_mAP_m": 0.665, "bbox_mAP_l": 0.771, "bbox_mAP_copypaste": "0.719 0.896 0.868 0.025 0.665 0.771", "segm_mAP": 0.802, "segm_mAP_50": 0.881, "segm_mAP_75": 0.881, "segm_mAP_s": 0.02, "segm_mAP_m": 0.724, "segm_mAP_l": 0.862, "segm_mAP_copypaste": "0.802 0.881 0.881 0.020 0.724 0.862"}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00494, "bbox_mAP": 0.714, "bbox_mAP_50": 0.887, "bbox_mAP_75": 0.863, "bbox_mAP_s": 0.05, "bbox_mAP_m": 0.679, "bbox_mAP_l": 0.766, "bbox_mAP_copypaste": "0.714 0.887 0.863 0.050 0.679 0.766", "segm_mAP": 0.793, "segm_mAP_50": 0.871, "segm_mAP_75": 0.863, "segm_mAP_s": 0.036, "segm_mAP_m": 0.687, "segm_mAP_l": 0.861, "segm_mAP_copypaste": "0.793 0.871 0.863 0.036 0.687 0.861"}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00617, "bbox_mAP": 0.67, "bbox_mAP_50": 0.908, "bbox_mAP_75": 0.835, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.594, "bbox_mAP_l": 0.726, "bbox_mAP_copypaste": "0.670 0.908 0.835 0.000 0.594 0.726", "segm_mAP": 0.799, "segm_mAP_50": 0.926, "segm_mAP_75": 0.908, "segm_mAP_s": 0.034, "segm_mAP_m": 0.715, "segm_mAP_l": 0.863, "segm_mAP_copypaste": "0.799 0.926 0.908 0.034 0.715 0.863"}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00741, "bbox_mAP": 0.67, "bbox_mAP_50": 0.866, "bbox_mAP_75": 0.826, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.509, "bbox_mAP_l": 0.734, "bbox_mAP_copypaste": "0.670 0.866 0.826 0.000 0.509 0.734", "segm_mAP": 0.757, "segm_mAP_50": 0.866, "segm_mAP_75": 0.84, "segm_mAP_s": 0.0, "segm_mAP_m": 0.511, "segm_mAP_l": 0.844, "segm_mAP_copypaste": "0.757 0.866 0.840 0.000 0.511 0.844"}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00865, "bbox_mAP": 0.698, "bbox_mAP_50": 0.873, "bbox_mAP_75": 0.819, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.566, "bbox_mAP_l": 0.77, "bbox_mAP_copypaste": "0.698 0.873 0.819 0.000 0.566 0.770", "segm_mAP": 0.746, "segm_mAP_50": 0.868, "segm_mAP_75": 0.82, "segm_mAP_s": 0.0, "segm_mAP_m": 0.545, "segm_mAP_l": 0.83, "segm_mAP_copypaste": "0.746 0.868 0.820 0.000 0.545 0.830"}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00989, "bbox_mAP": 0.615, "bbox_mAP_50": 0.777, "bbox_mAP_75": 0.756, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.443, "bbox_mAP_l": 0.702, "bbox_mAP_copypaste": "0.615 0.777 0.756 0.000 0.443 0.702", "segm_mAP": 0.683, "segm_mAP_50": 0.756, "segm_mAP_75": 0.756, "segm_mAP_s": 0.0, "segm_mAP_m": 0.449, "segm_mAP_l": 0.786, "segm_mAP_copypaste": "0.683 0.756 0.756 0.000 0.449 0.786"}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00111, "bbox_mAP": 0.669, "bbox_mAP_50": 0.823, "bbox_mAP_75": 0.76, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.514, "bbox_mAP_l": 0.762, "bbox_mAP_copypaste": "0.669 0.823 0.760 0.000 0.514 0.762", "segm_mAP": 0.727, "segm_mAP_50": 0.793, "segm_mAP_75": 0.793, "segm_mAP_s": 0.0, "segm_mAP_m": 0.511, "segm_mAP_l": 0.838, "segm_mAP_copypaste": "0.727 0.793 0.793 0.000 0.511 0.838"}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.714, "bbox_mAP_50": 0.861, "bbox_mAP_75": 0.799, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.606, "bbox_mAP_l": 0.785, "bbox_mAP_copypaste": "0.714 0.861 0.799 0.000 0.606 0.785", "segm_mAP": 0.763, "segm_mAP_50": 0.86, "segm_mAP_75": 0.838, "segm_mAP_s": 0.0, "segm_mAP_m": 0.594, "segm_mAP_l": 0.851, "segm_mAP_copypaste": "0.763 0.860 0.838 0.000 0.594 0.851"}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.00136, "bbox_mAP": 0.704, "bbox_mAP_50": 0.849, "bbox_mAP_75": 0.803, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.623, "bbox_mAP_l": 0.762, "bbox_mAP_copypaste": "0.704 0.849 0.803 0.000 0.623 0.762", "segm_mAP": 0.76, "segm_mAP_50": 0.847, "segm_mAP_75": 0.826, "segm_mAP_s": 0.0, "segm_mAP_m": 0.574, "segm_mAP_l": 0.84, "segm_mAP_copypaste": "0.760 0.847 0.826 0.000 0.574 0.840"}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.712, "bbox_mAP_50": 0.863, "bbox_mAP_75": 0.817, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.613, "bbox_mAP_l": 0.779, "bbox_mAP_copypaste": "0.712 0.863 0.817 0.000 0.613 0.779", "segm_mAP": 0.768, "segm_mAP_50": 0.861, "segm_mAP_75": 0.84, "segm_mAP_s": 0.0, "segm_mAP_m": 0.563, "segm_mAP_l": 0.858, "segm_mAP_copypaste": "0.768 0.861 0.840 0.000 0.563 0.858"}
